// <auto-generated />
using System;
using DynamicSun.Weather.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DynamicSun.Weather.Infrastructure.Migrations
{
    [DbContext(typeof(WeatherDbContext))]
    [Migration("20250303113433_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DynamicSun.Weather.Domain.Entities.WeatherData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AtmosphericPressure")
                        .HasColumnType("integer");

                    b.Property<int>("CloudBaseHeight")
                        .HasColumnType("integer");

                    b.Property<int>("Cloudiness")
                        .HasColumnType("integer");

                    b.Property<double>("DewPoint")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("ObjectCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ObjectEditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RelativeHumidity")
                        .HasColumnType("integer");

                    b.Property<double>("Temperature")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("Visibility")
                        .HasColumnType("integer");

                    b.Property<DateTime>("WeatherDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WeatherPhenomena")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("WindDirection")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<double>("WindSpeed")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.ToTable("WeatherData", "public");
                });
#pragma warning restore 612, 618
        }
    }
}
